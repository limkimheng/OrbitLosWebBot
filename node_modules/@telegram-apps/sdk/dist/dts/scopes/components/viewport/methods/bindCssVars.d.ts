import { GetCSSVarNameFn } from '../types.js';
/**
 * Creates CSS variables connected with the current viewport.
 *
 * By default, created CSS variables names are following the pattern
 * "--tg-theme-{name}", where
 * {name} is a theme parameters key name converted from camel case to kebab
 * case.
 *
 * Default variables:
 * - `--tg-viewport-height`
 * - `--tg-viewport-width`
 * - `--tg-viewport-stable-height`
 * - `--tg-viewport-content-safe-area-inset-top`
 * - `--tg-viewport-content-safe-area-inset-bottom`
 * - `--tg-viewport-content-safe-area-inset-left`
 * - `--tg-viewport-content-safe-area-inset-right`
 * - `--tg-viewport-safe-area-inset-top`
 * - `--tg-viewport-safe-area-inset-bottom`
 * - `--tg-viewport-safe-area-inset-left`
 * - `--tg-viewport-safe-area-inset-right`
 *
 * Variables are being automatically updated if the viewport was changed.
 *
 * @param getCSSVarName - function, returning computed complete CSS variable name. The CSS
 * variable will only be defined if the function returned non-empty string value.
 * @returns Function to stop updating variables.
 * @throws {TypedError} ERR_UNKNOWN_ENV
 * @throws {TypedError} ERR_VARS_ALREADY_BOUND
 * @throws {TypedError} ERR_NOT_MOUNTED
 * @throws {TypedError} ERR_NOT_INITIALIZED
 * @example Using no arguments
 * if (bindCssVars.isAvailable()) {
 *   bindCssVars();
 * }
 * @example Using custom CSS vars generator
 * if (bindCssVars.isAvailable()) {
 *   bindCssVars(key => `--my-prefix-${key}`);
 * }
 */
export declare const bindCssVars: import('../../../toolkit/wrapSafe.js').SafeWrapped<(getCSSVarName?: GetCSSVarNameFn) => VoidFunction, false, never>;
